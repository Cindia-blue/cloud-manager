== cloud-manager

cloud-manager is the Ruby cloud manager library, top to bottom:
* It can create cluster on vsphere
* It also can 

== Verrsion description
  
  version = 0.5.0

== Contributing to cloud-manager
 
* Check out the latest master to make sure the feature hasn't been implemented or the bug hasn't been fixed yet.
* Check out the issue tracker to make sure someone already hasn't requested it and/or contributed it.
* Fork the project.
* Start a feature/bugfix branch.
* Commit and push until you are happy with your contribution.
* Make sure to add tests for it. This is important so I don't break it in a future version unintentionally.
* Please try not to mess with the Rakefile, version, or history. If you want to have your own version, or is otherwise necessary, that is fine, but please isolate to its own commit so I can cherry-pick around it.

== Getting Started

  sudo gem install cloud-manager

== cloud provider definition
cloud_provider: {
  "name": "vsphere",
  "vc_addr": "FQDN/IP",
  "vc_user": "administrator",
  "vc_pwd": "123456",
  "vc_datacenter": "DatacenterName",
  "vc_clusters": [ #define the cluster/resource pool
  {
    "name": "Cluster1",
    "vc_rps": ["resource_pool1", "resource_pool2", "rp3"]
  }
  {
    "name": "Cluster2",
    "vc_rps": ["rp-hadoop"]
  }
  ],
  "vc_shared_datastore_pattern": ["share", "san*"], #define the datastore_pattern for share storage
  "vc_local_datastore_pattern": ["local", "vmfs*"], #define the datastore_pattern for local storage
  "cloud_adapter": "fog" #We use fog to connect to cloud provider, currently.
}

== cluster definition

== example

Here is an example of wading through server creation/start/stop/delete for vSphere Cloud:
# create a cluster
  IaasTask task = Iaas.create_cluster(parameter, :options => { :wait => false })
        # parameter["cluster_definition"] is a Hash object which contains the definition of this cluster
        # parameter["cloud_provider"] is a Hash object, which contains how to login the cloud server and the resource requirement.
   
# if caller doesn't care the progress, call this method to wait until this task is finished.
  IaasResult result = task.wait_for_completion()
   
# if caller cares the progress, call this method
  while !task.finished?
    IaasProgress prog = task.get_progress()
    # print out progess info
  end

# if caller want to know the result of the task, call:
  IaasResult result = task.get_result()
  if result.succeed?
    handle result ... ...
    else
      handle failure ... ...
      end
       
# start the cluster
  IaasTask task = Iaas.start_cluster(parameter, :options => { :wait => true })
# stop the cluster
  IaasTask task = Iaas.stop_cluster(parameter, :options => { :wait => true })
# delete the cluster
  IaasTask task = Iaas.delete_cluster(parameter, :options => { :wait => true })

== Copyright

Copyright (c) 2012 vmware. See LICENSE.txt for
further details.

